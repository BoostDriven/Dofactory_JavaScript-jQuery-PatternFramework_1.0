<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Proxy</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:mediumturquoise;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>jQuery</a> <span class="divider">/</span></li>
           <li class="active">Proxy</li>
         </ul>
        </div>
      </div>
      <br />
        

<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Proxy</h2>
                <p>
                  An object representing another object.<br /><br />
                  jQuery makes limited use of the Proxy pattern.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<a class='js' href="javascript:void(0);" onclick="return openPdf('jQueryPatterns');">jQuery Patterns Guide</a>
            </div>
        </div>
       
    </div>
     <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
   <div class="span10">
      <h3>Overview</h3>
      <br />
      <div class="ptext">
<p>
The Proxy Pattern is an object that stands-in or represents another object.  
Searching for the keyword proxy in jQuery source file leads to a proxy method. 
This method takes a function and returns a new one which will always have a particular context (i.e., the <span class="cd">this</span> value in the function). 
The returned function is the proxy function object.  
</p>
<p>
This is helpful in event handlers where there is a delay between calling and executing the event handler 
(and you don't want the overhead of building a closure).  Consider the example below: 
</p>
<pre class="prettyprint">
&lt;div id="area" class="red"&gt;&lt;/div&gt;

$("#area").on("click", function (e) {
    $(this).toggleClass("yellow");
});
</pre>
<style>
    #area, #area1 { 
        width:50px; height:50px; 
        cursor:hand;
        cursor:pointer;
    }
    .red {
        background: red;
    }
    .yellow {
        background:yellow;
    }
</style>
<p>
Click repeatedly on the area to see the effect.
</p>
<div id="area" class="red"></div>
<script type="text/javascript">
$("#area").on("click", function (e) {
    $(this).toggleClass("yellow");
});
</script>
<p>
Clicking the div element will toggle the area between red and yellow.  
The <span class="cd">$(this)</span> element refers to the element that was just clicked.  
Now, we wish to automate the toggling by using <span class="cd">setInterval</span>. Unfortunately this attempt fails: 
</p>
<pre class="prettyprint">
&lt;div id="area" class="red"&gt;&lt;/div&gt;

$("#area").on("click", function (e) {
    setInterval(function() {
        $(this).toggleClass("yellow");       
    }, 1000); 
});

</pre>
<p>
Because of the delay, the function's context has changed and the <span class="cd">$(this)</span> value refers to the global window object.   
This is where the proxy method comes in. We create a proxy function that remembers (using its closure) the original <span class="cd">$(this)</span> context when it was first called.  
Now <span class="cd">setInterval</span> will call the proxy rather than the original function.  Here is what this looks like: 
</p>
<pre class="prettyprint">
&lt;div id="area" class="red"&gt;&lt;/div&gt;

$("#area").on("click", function (e) {
    setInterval($.proxy(function () {
        $(this).toggleClass("yellow");
    }, this), 1000);
});

</pre>
<p>
Click on the area to start the process.
</p>
<div id="area1" class="red"></div>
<script type="text/javascript">
    var count = 0;
    $("#area1").on("click", function (e) {
        if (count++ > 0) return;  // prevent multiple clicks
        $(this).addClass("yellow"); // immediate feedback

        setInterval($.proxy(function () {
            $(this).toggleClass("yellow");
        }, this), 1000);
    });
</script>
<p>
After the first click, the area toggles between red and yellow indefinitely (we did not build in a stop).  
</p>
<p>
Note that you could have also solved the above problem by maintaining the original this value in a closure, like so: 
</p>
<pre class="prettyprint">
&lt;div id="area" class="red"&gt;&lt;/div&gt;

$("#area").on("click", function (e) {
    var that = this;
    setInterval(function () {
        that.toggleClass("yellow");
    }, 1000);
});

</pre>
<p>
Fortunately, this feature has been standardized in ES5 (EcmaScript 5) in the form of the <span class="cd">bind</span> method (which was borrowed from the Prototype framework).  
It's an elegant way to assign and memorize a context to a function. Most modern browsers support it.  Here is how it is used: 
</p>
<pre class="prettyprint">
&lt;div id="area" class="red"&gt;&lt;/div&gt;

$("#area").on("click", function (e) {
    setInterval(function () {
        $(this).toggleClass("yellow");    
    }.bind(this), 1000);
});
</pre>
<p>
The <span class="cd">bind</span> function creates a new function that, when called, has its <span class="cd">this</span> keyword set to the provided value. 
This is the proxy function that stands-in for the original function. 
</p>



      </div> 
  </div>
</div>

<br />
<br />
<div class="row">
    <div class="span4 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='observer.htm'>Observer</a>
    </div>
    <div class="span3">
        <a href='facade.htm'>Fa√ßade</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />

      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
