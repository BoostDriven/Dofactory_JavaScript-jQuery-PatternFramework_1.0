<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Iterator</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:mediumturquoise;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>jQuery</a> <span class="divider">/</span></li>
           <li class="active">Iterator</li>
         </ul>
        </div>
      </div>
      <br />
        

<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Iterator</h2>
                <p>
                  Sequentially access the elements of a collection.<br /><br />
                  jQuery's <span class="cd">each</span> method is an implementation of the Iterator Pattern.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<a class='js' href="javascript:void(0);" onclick="return openPdf('jQueryPatterns');">jQuery Patterns Guide</a>
            </div>
        </div>
       
    </div>
     <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
   <div class="span10">
      <h3>Overview</h3>
      <br />
      <div class="ptext">
<p>
The Iterator Pattern allows traversal (or looping) over a collection of objects.  
Collections in JavaScript include arrays and the properties on objects. 
jQuery's implementation of the iterator pattern is the <span class="cd">each</span> method and handles both collection types as the example below demonstrates. 
Here is an example of where jQuery is used to iterate over an array:
</p>

<pre class="prettyprint">
var rhyme = ["Eeny", "Meeny", "Miny", "Moe"];

$.each(rhyme, function (index, value) {
    alert(index + ": " + value);    // => 0: Eeny, 1: Meeny, 2: Miny, 3: Moe
});

</pre>
<p>
And here jQuery iterates over object properties:
</p>
<pre class="prettyprint">
var employee = {first: "Jonathan", last: "VanderHorn"};

$.each(employee, function (index, value) {
    alert(index + ": " + value);   // => first: Jonathan, last: VanderHorn
});

</pre>
<p>
The source code of <span class="cd">each</span> shows that it is able to handle either type. These are the relevant lines in that method: 
</p>
<pre class="prettyprint">
each: function( obj, callback, args ) {
    var name,
        i = 0,
        length = obj.length,
        isObj = length === undefined || jQuery.isFunction( obj );

    // ..

    if ( isObj ) {
        for ( name in obj ) {
            if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
                break;
            }
        }
    } else {
        for ( ; i < length; ) {
            if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
                break;
        }
    }
}

</pre>
<p>
The iterator is not written from scratch with methods like: <span class="cd">current</span>, <span class="cd">next</span>, and <span class="cd">hasNext</span> as explained in the original GoF Iterator pattern. 
Instead it uses the built-in <span class="cd">for</span> and the <span class="cd">for-in</span> constructs. 
In the code above we can see that the <span class="cd">if</span> block iterates over object properties (using for-in) and the <span class="cd">else</span> block iterates over arrays (using for). 
</p>

      </div> 
  </div>
</div>

<br />
<br />
<div class="row">
    <div class="span4 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='singleton.htm'>Singleton</a>
    </div>
    <div class="span3">
        <a href='observer.htm'>Observer</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />

      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
