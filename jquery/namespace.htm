<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Namespace</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:mediumturquoise;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>jQuery</a> <span class="divider">/</span></li>
           <li class="active">Namespace</li>
         </ul>
        </div>
      </div>
      <br />
        

<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Namespace</h2>
                <p>
                  Organizes the code to avoid name collisions.<br /><br />
                  jQuery makes use of the Namespace pattern in its code base.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<a class='js' href="javascript:void(0);" onclick="return openPdf('jQueryPatterns');">jQuery Patterns Guide</a>
            </div>
        </div>
       
    </div>
     <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
   <div class="span10">
      <h3>Overview</h3>
      <br />
      <div class="ptext">
<p>
jQuery makes use of namespaces. A goal of the Namespace pattern is to limit the number of variables introduced to the global namespace to just a single name. 
This single global item (object) then contains the entire code base for the application or library.  
</p>
<p>
This is exactly how jQuery is organized: a single object, named jQuery, holds the entire body of code, including variables, properties, methods, and other (nested) namespaces.  
Example nested namespaces include <span class="cd">event</span>, and <span class="cd">support</span> which are referenced as <span class="cd">jQuery.event</span> and <span class="cd">jQuery.support</span> respectively.
</p>
<p>
Actually, jQuery cheats a bit on the namespace pattern as it adds not one but two names to the global namespace, the second one being $ which is just shorthand for jQuery.  
The $ is referred to as an <i>alias</i> of jQuery.  In your code you can replace any $ occurrence with jQuery and vice versa; they are the same and this will not change your code.   
</p>
<p>
The statement below is from jQuery. It shows how the global names are exported. 
</p>
<pre class="prettyprint">
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;
</pre>
<p>
You find this line at the bottom of the jQuery source file. 
</p>
          <br />
<p>
Another area where jQuery uses namespacing is with events. When attaching an event you can quality your event name with a namespace, 
something like this: <span class="cd">click.Framework.User</span>: 
</p>
<pre class="prettyprint">
$("#name").on("click.Framework.User ", function() { alert("clonk"); };
</pre>
<p>
This will add click to the Framework and User namespace.  
Namespaces with events are not hierarchical; instead, each name is just a separate namespace.  
Our event is part of both the Framework namespace and the User namespace (and not the Framework.User namespace). 
</p>
<p>
This mechanism allows you to selectively detach event handlers without affecting any other click handler: 
</p>
<pre class="prettyprint">
$("#name").off("click.Framework"};
$("#name").off("click.User"};

</pre>
<p>
The two lines above have the same effect, as our click event is part of both namespaces.
</p>


      </div> 
  </div>
</div>

<br />
<br />
<div class="row">
    <div class="span4 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='chaining.htm'>Chaining</a>
    </div>
    <div class="span3">
        <a href='lazyload.htm'>Lazy Load</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />


      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
