<!doctype html>
<html>
<head>
  <title>Jasmine test page</title>
  <link href="../css/jasmine.css" rel="stylesheet" />
  <script src="../js/jasmine.js" type="text/javascript"></script>
  <script src="../js/jasmine-html.js" type="text/javascript"></script>

  <!-- Your code and specs go here -->
  <script type="text/javascript">
      function Calculator() {

          var total = 0;

          this.add = function (x) { numeric(x); total += x; return this; };
          this.sub = function (x) { numeric(x); total -= x; return this; };
          this.mul = function (x) { numeric(x); total *= x; return this; };
          this.div = function (x) { numeric(x); total /= x; return this; };

          this.get = function () { return total; };
          this.reset = function () { total = 0; };

          function numeric(x) {
              if (!isNaN(parseFloat(x)) && isFinite(x)) return;

              throw new TypeError("non-numeric value");
          }
      }
      describe("Calculator", function () {
          describe("Simple method calls", function () {

              var calculator = new Calculator();
              it("adds a number", function () {
                  expect(calculator.add(13).get()).toBe(13);
              });
              it("substracts a number", function () {
                  expect(calculator.sub(5).get()).toBe(8);
              });
              it("multiplies a number", function () {
                  expect(calculator.mul(4).get()).toBe(32);
              });
              it("divides a number", function () {
                  expect(calculator.div(2).get()).toBe(16);
              });
          });

          describe("Chained method calls", function () {
              var calculator = new Calculator();

              beforeEach(function () {
                  calculator.reset();
              });

              it("adds, substracts a number", function () {
                  expect(calculator.add(13).sub(8).get()).toBe(5);
              });
              it("adds, subtracts, multiplies, divides a number", function () {
                  expect(calculator.add(6).sub(1).mul(4).div(2).get()).toBe(10);
              });
          });

          describe("Non-numeric argument types", function () {
              var calculator = new Calculator();

              beforeEach(function () {
                  calculator.reset();
              });

              it("raises a type error exception (string)", function () {
                  var fn = function () {
                      return calculator.add("Sixteen").get();
                  };
                  expect(fn).toThrow("non-numeric value");
              });

              it("raises a type error exception (object)", function () {
                  var fn = function () {
                      return calculator.add({ city: "Miami" }).get();
                  };
                  expect(fn).toThrow("non-numeric value");
              });
          });

          describe("Positive/Negative tests", function () {
              var calculator = new Calculator();

              beforeEach(function () {
                  this.addMatchers({
                      toBePositive: function () {
                          return this.actual > 0;
                      }
                  });
              });

              it("returns a valid positive value", function () {
                  expect(calculator.add(3).sub(1).get()).toBePositive();
              });

              it("returns a valid negative value", function () {
                  expect(calculator.add(3).sub(9).get()).not.toBePositive();
              });
          });
      });


  </script>
  <script type="text/javascript">
      (function () {
          var jasmineEnv = jasmine.getEnv();
          jasmineEnv.updateInterval = 1000;

          var htmlReporter = new jasmine.HtmlReporter();
          jasmineEnv.addReporter(htmlReporter);

          jasmineEnv.specFilter = function (spec) {
              return htmlReporter.specFilter(spec);
          };

          var currentWindowOnload = window.onload;

          window.onload = function () {
              if (currentWindowOnload) {
                  currentWindowOnload();
              }
              execJasmine();
          };

          function execJasmine() {
              jasmineEnv.execute();
          }
      })();
   </script>
</head>
<body>
</body>
</html>
