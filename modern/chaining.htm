<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Chaining</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:lightsalmon;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>Modern</a> <span class="divider">/</span></li>
           <li class="active">Chaining</li>
         </ul>
        </div>
      </div>
      <br />
        

<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Chaining</h2>
                <p>
                  
                    Enables calling multiple methods on a single object.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<img src="../img/js.png" width="20" height="18" style="vertical-align:top;" alt="" />&nbsp; <a href="javascript:void(0);" onclick="return openPdf('ModernPatterns');">Modern Patterns Guide</a>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="span7">
                <br />
                <table class="usage">
                    <tr>
                        <td class="usage1">Usage in JavaScript:</td>
                        <td class="usage2">
                            <div class="progress progress-warning" style="width: 150px;">
                                <div class="bar" style="width: 100%;"></div>
                            </div>
                        </td>
                        <td class="usage3">high</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
     <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
    <div class="span10">
        <h3>Fundamentals</h3>
        <br />
<div class="ptext">
<p>
The Chaining Pattern enables calling multiple methods on a single object by stringing them together in a single statement, just like a chain. 
The result is a more concise coding style. Here is an example: 
</p>
<pre class="prettyprint">
var obj = object.method1("arg1").method2("arg2").method3("arg3");
</pre>
<p>
The equivalent code, without chaining requires several lines of code with intermediate variables. It would look like this: 
</p>
<pre class="prettyprint">
var obj1 = object.method1("arg1");
var obj2 = obj1.method2("arg2");
var obj = obj2.method3("arg3");

</pre>
<p>
How do you make methods chainable?  Actually, it is simple: just return the internal <span class="cd">this</span> variable, i.e. the current object the method is working on; like so: 
</p>
<pre class="prettyprint">
function func(arg) {

    // do something ...

    return this;
}

</pre>
<p>
Let's look at an example: 
</p>
<pre class="prettyprint">
function Calculator(start) {
    
    var total = start || 0;

    this.add = function (x) { total +=x; return this; };
    this.sub = function (x) { total -=x; return this; };
    this.mul = function (x) { total *=x; return this; };
    this.div = function (x) { total /=x; return this; };

    this.get = function () { return total; };
}


</pre>
<p>
Notice that each calculator operation returns <span class="cd">this</span>. This allows us to chain the operations together in a single statement. 
</p>
<pre class="prettyprint">
var calculator = new Calculator(10).add(8).div(2).mul(4).sub(30).add(100);   

alert("value = " + calculator.get());    // => value = 106

</pre>
<a class="btn" href="javascript:void(0);" onclick="run0();return false">Run</a>
<script type="text/javascript">
    function run0() {
        function Calculator(start) {

            var total = start || 0;

            this.add = function (x) { total += x; return this; };
            this.sub = function (x) { total -= x; return this; };
            this.mul = function (x) { total *= x; return this; };
            this.div = function (x) { total /= x; return this; };

            this.get = function () { return total; };
        }

        var calculator = new Calculator(10).add(8).div(2).mul(4).sub(30).add(100);

        alert("value = " + calculator.get());    // => value = 106
    }
</script>
<br /><br />
<p>
When a method does not have an obvious return value you should consider returning <span class="cd">this</span>. 
If it is never used it will be harmless, but it will allow clients of the method to combine it together with other methods in a single concise (i.e. chained) statement. 
</p>
<p>
A disadvantage of chaining is that it makes debugging harder.  
If an error occurs in any of your chained methods the debugger will inform you of the line in which the error occurs but not the method in which it failed.  
To dig deeper, you may need to unchain and create temporary variable assignments for each method to be able to pinpoint the failing method. 
</p>
<p>
Some developers refer to chaining as <i>fluent interfaces</i>, which is just another term for the Chaining Pattern. 
</p>
<p>
Chaining is a widely used pattern. The most popular JavaScript library, which is jQuery, uses it extensively.  Consider the following HTML markup and jQuery code: 
</p>
<pre class="prettyprint">
&lt;div id="thediv"&gt;
   &lt;table&gt;
      &lt;tr>&lt;td class="col">&lt;/td>&lt;tr&gt;
      &lt;tr>&lt;td class="col">&lt;td>&lt;/tr&gt;
    &lt;table&gt;
&lt;/div&gt;

$("#thediv")
    .find("table .col")
    .removeClass(".col")
    .css("background", "purple")
    .css("color", "white")
    .append("<span>purple here</span>");

</pre>
<table>
  <tr>
    <td style="width:120px; vertical-align:top;">
      <button class="btn" onclick="run();return false">Run</button>
    </td>
    <td>
      <div id="thediv">
           <table>
              <tr><td class="col"></td></tr>
              <tr><td class="col"></td></tr>
           </table>
      </div>
    </td>
  </tr>
</table>

<script type="text/javascript">
    function run() {
        $("#thediv")
            .find("table .col")
            .removeClass(".col")
            .css("background", "purple")
            .css("color", "white")
            .html("<span>purple here</span>");
    }
   
</script>
<br />
<p>
This is an example of jQuery chaining. In a single statement the jQuery selector selects all divs on the page; 
then for each div it finds tables with elements that have class='col'. Next it changes their background to purple, their color to white, and appends text to the element.  
If you run the code you will see the results above. 
</p>
<p>
This jQuery example demonstrates that with chaining you can write amazingly compact and concise code. 
Another benefit to jQuery is that the selector, i.e. the $("div") part in the above code, is executed only once. 
This is significant as the selector is almost always the slowest part of a jQuery statement because it needs to search the entire page. 
</p>
<p>
Adding custom chainable methods to jQuery is remarkably easy. 
Of course, it must return <span class="cd">this</span>, which in jQuery is the element that it just worked on.  
In the code below we are adding a custom turnBlue method to jQuery:
</p>
<pre class="prettyprint">
$.fn.turnBlue = function () {
     return $(this).css("background", "blue");
};

</pre>
<p>
You can now include turnBlue in any jQuery chaining statement.  Here is an example:
</p>
<pre class="prettyprint">
&lt;div id="myDiv" style="background:yellow;width:50px;height:50px;"&gt;&lt;/div&gt;

$("#myDiv").css("border", "solid 10px red")
           .turnBlue()
           .animate({ "width": "400px" }, 1000);

</pre>
        <table>
            <tr>
                <td style="width:120px; vertical-align:top;">
                    <button class="btn"  onclick="run1();return false">Run</button>
                    <button class="btn"  onclick="run2();return false">Reset</button>
                </td>
                <td>
                    <div id="myDiv" style="background:yellow;width:50px;height:50px;"></div>
                </td>
            </tr>
        </table>


<script type="text/javascript">
    function run1() {
        $.fn.turnBlue = function () {
            return $(this).css("background", "blue");
        };

        $("#myDiv").css("border", "solid 10px red")
                   .turnBlue()
                   .animate({ "width": "400px" }, 1000);
    }
    function run2() {
        $("#myDiv").css("border", "solid 0px red").css("background", "yellow").css("width", "50px");
    }
</script>



</div>
    </div>
</div>

<br />
<br />
<div class="row">
    <div class="span5 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='module.htm'>Module</a>

    </div>
    <div class="span3">
        <a href='invocation.htm'>Invocation</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />





      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
