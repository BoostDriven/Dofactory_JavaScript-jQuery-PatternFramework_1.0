<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Factory Method</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:crimson;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>Classic</a> <span class="divider">/</span></li>
           <li class="active">Factory Method</li>
         </ul>
        </div>
      </div>
      <br />
        
<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Factory Method</h2>
                <p>
                    Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<a class='js' href="javascript:void(0);" onclick="return openPdf('ClassicPatterns');">Classic Patterns Guide</a>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="span7">
                <br />
                <table class="usage">
                    <tr>
                        <td class="usage1">Usage in JavaScript:</td>
                        <td class="usage2">
                            <div class="progress progress-warning" style="width: 150px;">
                                <div class="bar" style="width: 80%;"></div>
                            </div>
                        </td>
                        <td class="usage3">medium high</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
    <div class="span8">
        <h3>Summary</h3>
        <br />
<p class="ptext">
A Factory Method creates new objects as instructed by the client. One way to create objects in JavaScript is by invoking a constructor function with the new operator. 
There are situations however, where the client does not, or should not, know which one of several candidate objects to instantiate. 
The Factory Method allows the client to delegate object creation while still retaining control over which type to instantiate.
</p> 
<p class="ptext">
The key objective of the Factory Method is extensibility. Factory Methods are frequently used in applications that manage, maintain, 
or manipulate collections of objects that are different but at the same time have many characteristics (i.e. methods and properties) in common. 
An example would be a collection of documents with a mix of Xml documents, Pdf documents, and Rtf documents.
</p> 
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<!-- Diagram -->
<div class="row">
    <div class="span8">
        <h3>Diagram</h3>
        <div style="padding: 14px 0 0 120px;">
            <img src="../img/diagrams/javascript-factory-method.jpg" alt="" />
        </div>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<br />
<!-- Participants -->
<div class="row">
    <div class="span8">
        <h3>Participants</h3>
        <br />
       <div class="ptext">
The objects participating in this pattern are: <br /><br />
   
<ul>
<li><b>Creator</b> -- In sample code: <b style="color:#088;">Factory</b>
 <ul>
  <li>the 'factory' object that creates new products</li>
  <li>implements 'factoryMethod' which returns newly created products</li>
 </ul>
</li>
<li><b>AbstractProduct</b> -- not used in JavaScript
 <ul>
  <li>declares an interface for products</li>
 </ul>
</li>
<li><b>ConcreteProduct</b> -- In sample code: <b style="color:#088;">Employees</b>
 <ul>
  <li>the product being created</li>
  <li>all products support the same interface (properties and methods)</li>
 </ul>
</li>
</ul>

</div>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<!-- JavaScript code -->
<div class="row">
    <div class="span8">
        <h3>JavaScript Code</h3>
        <br />
<p class="ptext">
In this JavaScript example the <span class="cd">Factory</span> object creates four different types of employees. 
Each employee type has a different hourly rate.  The <span class="cd">createEmployee</span> method is the actual Factory Method. 
The client instructs the factory what type of employee to create by passing a type argument into the Factory Method. 
</p>
<p class="ptext">
The AbstractProduct in the diagram is not implemented because Javascript does not support abstract classes or interfaces. 
However, we still need to ensure that all employee types have the same interface (properties and methods). 
</p>
<p class="ptext">
Four different employee types are created; all are stored in the same array. 
Each employee is asked to say what they are and their hourly rate.
</p>
<p class="ptext">
The <span class="cd">log</span> function is a helper which collects and displays results. 
</p>
        
        <br />
<pre class="prettyprint">
function Factory() {
    this.createEmployee = function (type) {
        var employee;

        if (type === "fulltime") {
            employee = new FullTime();
        } else if (type === "parttime") {
            employee = new PartTime();
        } else if (type === "temporary") {
            employee = new Temporary();
        } else if (type === "contractor") {
            employee = new Contractor();
        }

        employee.type = type;
        employee.say = function () {
            log.add(this.type + ": rate " + this.hourly + "/hour");
        }
        return employee;
    }
}

var FullTime = function () {
    this.hourly = "$12";
};
var PartTime = function () {
    this.hourly = "$11";
};
var Temporary = function () {
    this.hourly = "$10";
};
var Contractor = function () {
    this.hourly = "$15";
};

// log helper
var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();


function run() {

    var employees = [];

    var factory = new Factory();

    employees.push(factory.createEmployee("fulltime"));
    employees.push(factory.createEmployee("parttime"));
    employees.push(factory.createEmployee("temporary"));
    employees.push(factory.createEmployee("contractor"));

    for (var i = 0, len = employees.length; i < len; i++) {
        employees[i].say();
    }

    log.show();
}
</pre>
        <a class="btn" href="javascript:void(0);" onclick="run();return false;">Run</a>

<script type="text/javascript">
    function Factory() {
        this.createEmployee = function (type) {
            var employee;

            if (type === "fulltime") {
                employee = new FullTime();
            } else if (type === "parttime") {
                employee = new PartTime();
            } else if (type === "temporary") {
                employee = new Temporary();
            } else if (type === "contractor") {
                employee = new Contractor();
            }

            employee.type = type;
            employee.say = function () {
                log.add(this.type + ": rate " + this.hourly + "/hour");
            }
            return employee;
        }
    }

    var FullTime = function () {
        this.hourly = "$12";
    };
    var PartTime = function () {
        this.hourly = "$11";
    };
    var Temporary = function () {
        this.hourly = "$10";
    };
    var Contractor = function () {
        this.hourly = "$15";
    };

    // log helper
    var log = (function () {
        var log = "";
        return {
            add: function (msg) { log += msg + "\n"; },
            show: function () { alert(log); log = ""; }
        }
    })();


    function run() {

        var employees = [];

        var factory = new Factory();

        employees.push(factory.createEmployee("fulltime"));
        employees.push(factory.createEmployee("parttime"));
        employees.push(factory.createEmployee("temporary"));
        employees.push(factory.createEmployee("contractor"));

        for (var i = 0, len = employees.length; i < len; i++) {
            employees[i].say();
        }

        log.show();
    }
</script>



    </div>
</div>

<br />
<br />
<br />

<!-- JavaScript Optimated Code -->
<div class="row">
    <div class="span8">
        <h3>JavaScript Optimized Code</h3>
        <br />
       <p class="ptext">
The Namespace pattern is applied to keep the code out of the global namespace. Our namespace is named <span class="cd">Patterns.Classic</span>.
A Revealing Module named <span class="cd">Factory</span> encapsulates all of Factory Method's functions.  
Only the actual Factory Method named <span class="cd">createEmployee</span> is exposed (revealed), whereas all other functions 
<span class="cd">FullTime</span>, <span class="cd">PartTime</span>, <span class="cd">Temporary</span> and <span class="cd">Contractor</span> constructor functions are kept private inside the module. 
</p>
<p class="ptext">
The <span class="cd">Patterns</span> object contains the <span class="cd">namespace</span> function which constructs namespaces non-destructively, 
that is, if a name already exists it won't overwrite it. 
</p>
<p class="ptext">
The <span class="cd">log</span> function is a helper which collects and displays results.
</p>
        
        <br />
<pre class="prettyprint">
var Patterns = {
    namespace: function (name) {
        var parts = name.split(".");
        var ns = this;

        for (var i = 0, len = parts.length; i < len; i++) {
            ns[parts[i]] = ns[parts[i]] || {};
            ns = ns[parts[i]];
        }

        return ns;
    }
};

Patterns.namespace("Classic").Factory = (function () {

    var createEmployee = function (type) {
        var employee;

        if (type === "fulltime") {
            employee = new FullTime();
        } else if (type === "parttime") {
            employee = new PartTime();
        } else if (type === "temporary") {
            employee = new Temporary();
        } else if (type === "contractor") {
            employee = new Contractor();
        }

        employee.type = type;
        employee.say = function () {
            log.add(this.type + ": rate " + this.hourly + "/hour");
        }
        return employee;
    };

    var FullTime = function () {
        this.hourly = "$12";
    };
    var PartTime = function () {
        this.hourly = "$11";
    };
    var Temporary = function () {
        this.hourly = "$10";
    };
    var Contractor = function () {
        this.hourly = "$15";
    };

    return {
        createEmployee: createEmployee
    };

})();

// log helper
var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();


function run() {

    var employees = [];

    var factory = Patterns.Classic.Factory;

    employees.push(factory.createEmployee("fulltime"));
    employees.push(factory.createEmployee("parttime"));
    employees.push(factory.createEmployee("temporary"));
    employees.push(factory.createEmployee("contractor"));

    for (var i = 0, len = employees.length; i < len; i++) {
        employees[i].say();
    }

    log.show();
}
</pre>
        <a class="btn" href="javascript:void(0);" onclick="run1();return false;">Run</a>

<script type="text/javascript">
    var Patterns = {
        namespace: function (name) {
            var parts = name.split(".");
            var ns = this;

            for (var i = 0, len = parts.length; i < len; i++) {
                ns[parts[i]] = ns[parts[i]] || {};
                ns = ns[parts[i]];
            }

            return ns;
        }
    };

    Patterns.namespace("Classic").Factory = (function () {

        var createEmployee = function (type) {
            var employee;

            if (type === "fulltime") {
                employee = new FullTime();
            } else if (type === "parttime") {
                employee = new PartTime();
            } else if (type === "temporary") {
                employee = new Temporary();
            } else if (type === "contractor") {
                employee = new Contractor();
            }

            employee.type = type;
            employee.say = function () {
                log.add(this.type + ": rate " + this.hourly + "/hour");
            }
            return employee;
        };

        var FullTime = function () {
            this.hourly = "$12";
        };
        var PartTime = function () {
            this.hourly = "$11";
        };
        var Temporary = function () {
            this.hourly = "$10";
        };
        var Contractor = function () {
            this.hourly = "$15";
        };

        return {
            createEmployee: createEmployee
        };

    })();

    // log helper
    var log = (function () {
        var log = "";
        return {
            add: function (msg) { log += msg + "\n"; },
            show: function () { alert(log); log = ""; }
        }
    })();


    function run1() {

        var employees = [];

        var factory = Patterns.Classic.Factory;

        employees.push(factory.createEmployee("fulltime"));
        employees.push(factory.createEmployee("parttime"));
        employees.push(factory.createEmployee("temporary"));
        employees.push(factory.createEmployee("contractor"));

        for (var i = 0, len = employees.length; i < len; i++) {
            employees[i].say();
        }

        log.show();
    }

</script>



    </div>
</div>

<br />
<br />
<br />
<div class="row">
    <div class="span4 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='builder.htm'>Builder</a>

    </div>
    <div class="span3">
        <a href='prototype.htm'>Prototype</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />





      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
