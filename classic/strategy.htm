<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Strategy</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:crimson;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>Classic</a> <span class="divider">/</span></li>
           <li class="active">Strategy</li>
         </ul>
        </div>
      </div>
      <br />
        


<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Strategy</h2>
                <p>
                    Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<a class='js' href="javascript:void(0);" onclick="return openPdf('ClassicPatterns');">Classic Patterns Guide</a>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="span7">
                <br />
                <table class="usage">
                    <tr>
                        <td class="usage1">Usage in JavaScript:</td>
                        <td class="usage2">
                            <div class="progress progress-warning" style="width: 150px;">
                                <div class="bar" style="width: 55%;"></div>
                            </div>
                        </td>
                        <td class="usage3">medium</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
    <div class="span8">
        <h3>Summary</h3>
        <br />
<p class="ptext">
The Strategy pattern encapsulates alternative algorithms (or strategies) for a particular task. 
It allows a method to be swapped out at runtime by any other method (strategy) without the client realizing it. 
Essentially, Strategy is a group of algorithms that are interchangeable.
</p> 
<p class="ptext">
Say we like to test the performance of different sorting algorithms to an array of numbers: shell sort, heap sort, bubble sort, quicksort, etc. 
Applying the Strategy pattern to these algorithms allows the test program to loop through all algorithms, simply by changing them at runtime and test each of these against the array. 
For Strategy to work all method signatures must be the same so that they can vary without the client program knowing about it.</p> 
<p class="ptext">
In JavaScript the Strategy pattern is widely used as a plug-in mechanism when building extensible frameworks. This can be an extremely effective approach. 
</p>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<!-- Diagram -->
<div class="row">
    <div class="span8">
        <h3>Diagram</h3>
        <div style="padding: 14px 0 0 120px;">
            <img src="../img/diagrams/javascript-strategy.jpg" alt="" />
        </div>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<br />
<!-- Participants -->
<div class="row">
    <div class="span8">
        <h3>Participants</h3>
        <br />
<div class="ptext">
The objects participating in this pattern are: <br /><br />
   
<ul>
<li><b>Context</b> -- In sample code: <b style="color:#088;">Shipping</b>
 <ul>
  <li>maintains a reference to the current Strategy object</li>
  <li>supports interface to allow clients to request Strategy calculations</li>
  <li>allows clients to change Strategy</li>
 </ul>
</li>
<li><b>Strategy</b> -- In sample code: <b style="color:#088;">UPS, USPS, Fedex</b>
 <ul>
  <li>implements the algorithm using the Strategy interface</li>
 </ul>
</li>
</ul>


</div>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<!-- JavaScript code -->
<div class="row">
    <div class="span8">
        <h3>JavaScript Code</h3>
        <br />
<p class="ptext">
In this example we have a product order that needs to be shipped from a warehouse to a customer. Different shipping companies are evaluated to determine the best price. 
This can be useful with shopping carts where customers select their shipping preferences and the selected Strategy returns the estimated cost.
</p>
<p class="ptext">
<span class="cd">Shipping</span> is the Context and the 3 shipping companies <span class="cd">UPS</span>, <span class="cd">USPS</span>, and <span class="cd">Fedex</span>
are the Strategies.  The shipping companies (strategies) are changed 3 times and each time we 
calculate the cost of shipping. In a real-world scenario the calculate methods may call into the shipper's
Web service. At the end we display the different costs. 
</p>
<p class="ptext">
The <span class="cd">log</span> function is a helper which collects and displays results. 
</p>
       
        <br />
<pre class="prettyprint">
var Shipping = function() {
    this.company = "";
};

Shipping.prototype = {

    setStrategy: function(company) {
        this.company = company;
    },
    calculate: function(package) {
        return this.company.calculate(package);
    }
};

var UPS = function() {
    this.calculate = function(package) {

        // calculations...

        return "$45.95";
    }
};

var USPS = function() {
    this.calculate = function(package) {

        // calculations...

        return "$39.40";
    }
};

var Fedex = function() {
    this.calculate = function(package) {

        // calculations...

        return "$43.20";
    }
};

// log helper
var log = (function() {
    var log = "";
    return {
        add: function(msg) { log += msg + "\n"; },
        show: function() { alert(log); log = ""; }
    }
})();


function run() {

    var package = { from: "76712", to: "10012", weigth: "lkg" };

    // the 3 strategies

    var ups = new UPS();
    var usps = new USPS();
    var fedex = new Fedex();

    var shipping = new Shipping();
    shipping.setStrategy(ups);
    log.add("UPS Strategy: " + shipping.calculate(package));

    shipping.setStrategy(usps);
    log.add("USPS Strategy: " + shipping.calculate(package));

    shipping.setStrategy(fedex);
    log.add("Fedex Strategy: " + shipping.calculate(package));

    log.show();
}
</pre>
        <a class="btn" href="javascript:void(0);" onclick="run();return false;">Run</a>

 <script type="text/javascript">
     var Shipping = function () {
         this.company = "";
     };

     Shipping.prototype = {

         setStrategy: function (company) {
             this.company = company;
         },
         calculate: function (package) {
             return this.company.calculate(package);
         }
     };

     var UPS = function () {
         this.calculate = function (package) {

             // calculations...

             return "$45.95";
         }
     };

     var USPS = function () {
         this.calculate = function (package) {

             // calculations...

             return "$39.40";
         }
     };

     var Fedex = function () {
         this.calculate = function (package) {

             // calculations...

             return "$43.20";
         }
     };

     function run() {

         var package = { from: "76712", to: "10012", weigth: "lkg" };

         // the 3 strategies

         var ups = new UPS();
         var usps = new USPS();
         var fedex = new Fedex();

         var shipping = new Shipping();
         shipping.setStrategy(ups);
         log.add("UPS Strategy: " + shipping.calculate(package));

         shipping.setStrategy(usps);
         log.add("USPS Strategy: " + shipping.calculate(package));

         shipping.setStrategy(fedex);
         log.add("Fedex Strategy: " + shipping.calculate(package));

         log.show();
     }
</script>



    </div>
</div>

<br />
<br />
<br />

<!-- JavaScript Optimated Code -->
<div class="row">
    <div class="span8">
        <h3>JavaScript Optimized Code</h3>
        <br />
      <p class="ptext">
The Namespace pattern is applied to keep the code out of the global namespace. Our namespace is named <span class="cd">Patterns.Classic</span>.
A Revealing Module named <span class="cd">Strategy</span> returns (i.e. reveals) only a single item: the <span class="cd">Shipping</span> constructor function, 
          which, in turn, only exposes two methods: <span class="cd">setStrategy</span> and <span class="cd">calculate</span>.
</p>
<p class="ptext">          
Here the <span class="cd">setStrategy</span> takes in a string and assigns the appropriate strategy within the Strategy module. 
    All three shipping strategies, i.e. <span class="cd">UPS</span>, <span class="cd">USPS</span>, and <span class="cd">Fedex</span>, are kept private inside the module's closure. 
    Again, this is a nice example of OO encapsulation and data hiding using JavaScript patterns. 
</p>
<p class="ptext">
The <span class="cd">Patterns</span> object contains the <span class="cd">namespace</span> function which constructs namespaces non-destructively, 
that is, if a name already exists it won't overwrite it. 
</p>
<p class="ptext">
The <span class="cd">log</span> function is a helper which collects and displays results.
</p>
       
        <br />
<pre class="prettyprint">
var Patterns = {
    namespace: function (name) {
        var parts = name.split(".");
        var ns = this;

        for (var i = 0, len = parts.length; i < len; i++) {
            ns[parts[i]] = ns[parts[i]] || {};
            ns = ns[parts[i]];
        }

        return ns;
    }
};

Patterns.namespace("Classic").Strategy = (function () {

    var Shipping = function () {
        var company = "";

        this.setStrategy = function (name) {
            if (name === "UPS") {
                company = new UPS();
            } else if (name === "USPS") {
                company = new USPS();
            } else if (name === "Fedex") {
                company = new Fedex();
            }
        };

        this.calculate = function (package) {
            return company.calculate(package);
        }
    };

    var UPS = function () {
        this.calculate = function (package) {

            // calculations...

            return "$45.95";
        }
    };

    var USPS = function () {
        this.calculate = function (package) {

            // calculations...

            return "$39.40";
        }
    };

    var Fedex = function () {
        this.calculate = function (package) {

            // calculations...

            return "$43.20";
        }
    };

    return { Shipping: Shipping };

})();

// log helper
var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();

function run() {

    var shipping = new Patterns.Classic.Strategy.Shipping();

    var package = { from: "76712", to: "10012", weigth: "lkg" };

    // the 3 strategies
    shipping.setStrategy("UPS");
    log.add("UPS Strategy: " + shipping.calculate(package));

    shipping.setStrategy("USPS");
    log.add("USPS Strategy: " + shipping.calculate(package));

    shipping.setStrategy("Fedex");
    log.add("Fedex Strategy: " + shipping.calculate(package));

    log.show();
}
</pre>
        <a class="btn" href="javascript:void(0);" onclick="run1();return false;">Run</a>

<script type="text/javascript">
    var Patterns = {
        namespace: function (name) {
            var parts = name.split(".");
            var ns = this;

            for (var i = 0, len = parts.length; i < len; i++) {
                ns[parts[i]] = ns[parts[i]] || {};
                ns = ns[parts[i]];
            }

            return ns;
        }
    };

    Patterns.namespace("Classic").Strategy = (function () {

        var Shipping = function () {
            var company = "";

            this.setStrategy = function (name) {
                if (name === "UPS") {
                    company = new UPS();
                } else if (name === "USPS") {
                    company = new USPS();
                } else if (name === "Fedex") {
                    company = new Fedex();
                }
            };

            this.calculate = function (package) {
                return company.calculate(package);
            }
        };

        var UPS = function () {
            this.calculate = function (package) {

                // calculations...

                return "$45.95";
            }
        };

        var USPS = function () {
            this.calculate = function (package) {

                // calculations...

                return "$39.40";
            }
        };

        var Fedex = function () {
            this.calculate = function (package) {

                // calculations...

                return "$43.20";
            }
        };

        return { Shipping: Shipping };

    })();

    // log helper
    var log = (function () {
        var log = "";
        return {
            add: function (msg) { log += msg + "\n"; },
            show: function () { alert(log); log = ""; }
        }
    })();

    function run1() {

        var shipping = new Patterns.Classic.Strategy.Shipping();

        var package = { from: "76712", to: "10012", weigth: "lkg" };

        // the 3 strategies
        shipping.setStrategy("UPS");
        log.add("UPS Strategy: " + shipping.calculate(package));

        shipping.setStrategy("USPS");
        log.add("USPS Strategy: " + shipping.calculate(package));

        shipping.setStrategy("Fedex");
        log.add("Fedex Strategy: " + shipping.calculate(package));

        log.show();
    }

</script>



    </div>
</div>

<br />
<br />
<br />
<div class="row">
    <div class="span4 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='state.htm'>State</a>

    </div>
    <div class="span3">
        <a href='template.htm'>Template Method</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />



      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
