<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Iterator</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:crimson;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>Classic</a> <span class="divider">/</span></li>
           <li class="active">Iterator</li>
         </ul>
        </div>
      </div>
      <br />
        


<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Iterator</h2>
                <p>
                   Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<a class='js' href="javascript:void(0);" onclick="return openPdf('ClassicPatterns');">Classic Patterns Guide</a>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="span7">
                <br />
                <table class="usage">
                    <tr>
                        <td class="usage1">Usage in JavaScript:</td>
                        <td class="usage2">
                            <div class="progress progress-warning" style="width: 150px;">
                                <div class="bar" style="width: 100%;"></div>
                            </div>
                        </td>
                        <td class="usage3">high</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
    <div class="span8">
        <h3>Summary</h3>
        <br />
<p class="ptext">
The Iterator pattern allows clients to effectively loop over a collection of objects
</p> 
<p class="ptext">
A common programming task is to traverse and manipulate a collection of objects.  
These collections may be stored as an array or perhaps something more complex, such as a tree or graph structure.  
In addition, you may need to access the items in the collection in a certain order, such as, front to back, back to front, 
depth first (as in tree searches), skip evenly numbered objects, etc.  
</p> 
<p class="ptext">
The Iterator design pattern solves this problem by separating the collection of objects from the traversal 
of these objects by implementing a specialized iterator.
</p> 
<p class="ptext">
Today, many languages have Iterators built-in by supporting 'for-each'-type constructs and IEnumerable and IEnumerator interfaces.  
However, JavaScript only supports basic looping in the form of 
<span class="cd">for</span>, <span class="cd">for-in</span>, <span class="cd">while</span>, and <span class="cd">do while</span> statements. 
</p> 
<p class="ptext">
The Iterator pattern allows JavaScript developers to design looping constructs that are far more flexible and sophisticated. 
</p>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<!-- Diagram -->
<div class="row">
    <div class="span8">
        <h3>Diagram</h3>
        <div style="padding: 14px 0 0 120px;">
            <img src="../img/diagrams/javascript-iterator.jpg" alt="" />
        </div>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<br />
<!-- Participants -->
<div class="row">
    <div class="span8">
        <h3>Participants</h3>
        <br />
<div class="ptext">
The objects participating in this pattern are: <br /><br />
   
<ul>
<li><b>Client</b> -- In sample code: the run() function
 <ul>
  <li>references and invokes Iterator with collection of objects</li>
 </ul>
</li>
<li><b>Iterator</b> -- In sample code: <b style="color:#088;">Iterator</b>
 <ul>
  <li>implements iterator interface with methods first(), next(), etc</li>
  <li>keeps track of current position when traversing collection</li>
 </ul>
</li>
<li><b>Items</b> -- In sample code: <b style="color:#088;">Items</b>
 <ul>
  <li>individual objects of the collection being traversed</li>
 </ul>
</li>
</ul>

</div>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<!-- JavaScript code -->
<div class="row">
    <div class="span8">
        <h3>JavaScript Code</h3>
        <br />
<p class="ptext">
The <span class="cd">Iterator</span> object maintains a reference to the collection and the current position.
It also implements the 'standard' Iterator interface with methods like: 
<span class="cd">first</span>, <span class="cd">next</span>, <span class="cd">hasNext</span>, <span class="cd">reset</span>, and <span class="cd">each</span>.
</p>
<p class="ptext">Two looping methods are used: a built-in <span class="cd">for</span> loop and a 
newly created <span class="cd">each</span> method. The <span class="cd">for</span> loop uses the <span class="cd">first</span>, <span class="cd">hasNext</span>, and <span class="cd">next</span> 
methods to control the iteration.
The <span class="cd">each</span> method does internally exactly the same (i.e. runs a for loop), 
but to the client the syntax has been greatly simplified.
</p>

<p class="ptext">
The <span class="cd">log</span> function is a helper which collects and displays results. 
</p>
       
        <br />
<pre class="prettyprint">
var Iterator = function(items) {
    this.index = 0;
    this.items = items;
}

Iterator.prototype = {
    first: function() {
        this.reset();
        return this.next();
    },
    next: function() {
        return this.items[this.index++];
    },
    hasNext: function() {
        return this.index <= this.items.length;
    },
    reset: function() {
        this.index = 0;
    },
    each: function(callback) {
        for (var item = this.first(); this.hasNext(); 
                                      item = this.next()) {
            callback(item);
        }
    }
}

// log helper
var log = (function() {
    var log = "";
    return {
        add: function(msg) { log += msg + "\n"; },
        show: function() { alert(log); log = ""; }
    }
})();


function run() {

    var items = ["one", 2, "circle", true, "Applepie"];
    var iter = new Iterator(items);

    // using for loop

    for (var item = iter.first(); iter.hasNext(); 
                                  item = iter.next()) {
        log.add(item);
    }

    log.add("");

    // using Iterator's each method

    iter.each(function(item) {
        log.add(item);
    });

    log.show();
}
</pre>
        <a class="btn" href="javascript:void(0);" onclick="run();return false;">Run</a>

 <script type="text/javascript">
     var Iterator = function (items) {
         this.index = 0;
         this.items = items;
     }

     Iterator.prototype = {
         first: function () {
             this.reset();
             return this.next();
         },
         next: function () {
             return this.items[this.index++];
         },
         hasNext: function () {
             return this.index <= this.items.length;
         },
         reset: function () {
             this.index = 0;
         },
         each: function (callback) {
             for (var item = this.first() ; this.hasNext() ; item = this.next()) {
                 callback(item);
             }
         }
     }

     function run() {

         var items = ["one", 2, "circle", true, "Applepie"];
         var iter = new Iterator(items);

         // using for loop

         for (var item = iter.first() ; iter.hasNext() ; item = iter.next()) {
             log.add(item);
         }

         log.add("");

         // using Iterator's each method

         iter.each(function (item) {
             log.add(item);
         });

         log.show();
     }
</script>



    </div>
</div>

<br />
<br />
<br />

<!-- JavaScript Optimated Code -->
<div class="row">
    <div class="span8">
        <h3>JavaScript Optimized Code</h3>
        <br />
<p class="ptext">
The Namespace pattern is applied to keep the code out of the global namespace. Our namespace is named <span class="cd">Patterns.Classic</span>.
A Revealing Module named <span class="cd">Iterator</span> returns (i.e. reveals) only a single item: the <span class="cd">Iterator</span> and by association its prototype object. 
</p>
<p class="ptext">
The <span class="cd">Patterns</span> object contains the <span class="cd">namespace</span> function which constructs namespaces non-destructively, 
that is, if a name already exists it won't overwrite it. 
</p>
<p class="ptext">
The <span class="cd">log</span> function is a helper which collects and displays results.
</p>
        
        <br />
<pre class="prettyprint">
var Patterns = {
    namespace: function (name) {
        var parts = name.split(".");
        var ns = this;

        for (var i = 0, len = parts.length; i < len; i++) {
            ns[parts[i]] = ns[parts[i]] || {};
            ns = ns[parts[i]];
        }

        return ns;
    }
};

Patterns.namespace("Classic").Iterator = (function () {

    var Iterator = function (items) {
        this.index = 0;
        this.items = items;
    }

    Iterator.prototype = {
        first: function () {
            this.reset();
            return this.next();
        },
        next: function () {
            return this.items[this.index++];
        },
        hasNext: function () {
            return this.index <= this.items.length;
        },
        reset: function () {
            this.index = 0;
        },
        each: function (callback) {
            for (var item = this.first(); this.hasNext(); 
                                          item = this.next()) {
                callback(item);
            }
        }
    }

    return {
        Iterator: Iterator
    }

})();

// log helper
var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();


function run() {

    var items = ["one", 2, "circle", true, "Applepie"];
    var iter = new Patterns.Classic.Iterator.Iterator(items);

    // using for loop

    for (var item = iter.first(); iter.hasNext(); 
                                  item = iter.next()) {
        log.add(item);
    }

    log.add("");

    // using Iterator's each method

    iter.each(function (item) {
        log.add(item);
    });

    log.show();
}
</pre>
        <a class="btn" href="javascript:void(0);" onclick="run1();return false;">Run</a>

<script type="text/javascript">
    var Patterns = {
        namespace: function (name) {
            var parts = name.split(".");
            var ns = this;

            for (var i = 0, len = parts.length; i < len; i++) {
                ns[parts[i]] = ns[parts[i]] || {};
                ns = ns[parts[i]];
            }

            return ns;
        }
    };

    Patterns.namespace("Classic").Iterator = (function () {

        var Iterator = function (items) {
            this.index = 0;
            this.items = items;
        }

        Iterator.prototype = {
            first: function () {
                this.reset();
                return this.next();
            },
            next: function () {
                return this.items[this.index++];
            },
            hasNext: function () {
                return this.index <= this.items.length;
            },
            reset: function () {
                this.index = 0;
            },
            each: function (callback) {
                for (var item = this.first() ; this.hasNext() ; item = this.next()) {
                    callback(item);
                }
            }
        }

        return {
            Iterator: Iterator
        }

    })();

    // log helper
    var log = (function () {
        var log = "";
        return {
            add: function (msg) { log += msg + "\n"; },
            show: function () { alert(log); log = ""; }
        }
    })();


    function run1() {

        var items = ["one", 2, "circle", true, "Applepie"];
        var iter = new Patterns.Classic.Iterator.Iterator(items);

        // using for loop

        for (var item = iter.first() ; iter.hasNext() ; item = iter.next()) {
            log.add(item);
        }

        log.add("");

        // using Iterator's each method

        iter.each(function (item) {
            log.add(item);
        });

        log.show();
    }

</script>



    </div>
</div>

<br />
<br />
<br />
<div class="row">
    <div class="span4 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='interpreter.htm'>Interpreter</a>

    </div>
    <div class="span3">
        <a href='mediator.htm'>Mediator</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />





      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
