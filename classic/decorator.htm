<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Decorator</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:crimson;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>Classic</a> <span class="divider">/</span></li>
           <li class="active">Decorator</li>
         </ul>
        </div>
      </div>
      <br />
        


<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Decorator</h2>
                <p>
                    Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<a class='js' href="javascript:void(0);" onclick="return openPdf('ClassicPatterns');">Classic Patterns Guide</a>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="span7">
                <br />
                <table class="usage">
                    <tr>
                        <td class="usage1">Usage in JavaScript:</td>
                        <td class="usage2">
                            <div class="progress progress-warning" style="width: 150px;">
                                <div class="bar" style="width: 80%;"></div>
                            </div>
                        </td>
                        <td class="usage3">medium high</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
    <div class="span8">
        <h3>Summary</h3>
        <br />
<p class="ptext">
The Decorator pattern extends (decorates) an object’s behavior dynamically. 
The ability to add new behavior at runtime is accomplished by a Decorator object which ‘wraps itself’ around the original object. 
Multiple decorators can add or override functionality to the original object.
</p> 
<p class="ptext">
An example of a decorator is security management where business objects are given additional access to privileged information depending on the privileges of the authenticated user. 
For example, an HR manager gets to work with an employee object that has appended (i.e. is decorated with) the employee's salary record so that salary information can be viewed. 
</p> 
<p class="ptext">
Decorators provide flexibility to statically typed languages by allowing runtime changes as opposed to inheritance which takes place at compile time. 
JavaScript, however, is a dynamic language and the ability to extend an object at runtime is baked into the language itself. 
</p> 
<p class="ptext">
For this reason, the Decorator pattern is less relevant to JavaScript developers. 
In JavaScript the Extend and Mixin patterns subsume the Decorator pattern. We will look at this in the JavaScript optimized code. 
</p> 
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<!-- Diagram -->
<div class="row">
    <div class="span8">
        <h3>Diagram</h3>
        <div style="padding: 14px 0 0 120px;">
            <img src="../img/diagrams/javascript-decorator.jpg" alt="" />
        </div>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<br />
<!-- Participants -->
<div class="row">
    <div class="span8">
        <h3>Participants</h3>
        <br />
<div class="ptext">
The objects participating in this pattern are: <br /><br />
   
<ul>
<li><b>Client</b> -- In sample code: the run() function
 <ul>
  <li>maintains a reference to the decorated Component</li>
 </ul>
</li>
<li><b>Component</b> -- In sample code: <b style="color:#088;">User</b>
 <ul>
  <li>object to which additional functionality is added</li>
 </ul>
</li>
<li><b>Decorator</b> -- In sample code: <b style="color:#088;">DecoratedUser</b>
 <ul>
  <li>'wraps around' Component by maintaining a reference to it</li>
  <li>defines an interface that conforms to Component's interface</li>
  <li>implements the additional functionality (addedMembers in diagram)</li>
 </ul>
</li>
</ul>


</div>
    </div>
    <div class="span3 offset1"></div>
</div>
<br />
<!-- JavaScript code -->
<div class="row">
    <div class="span8">
        <h3>JavaScript Code</h3>
        <br />
<p class="ptext">
In the example code a <span class="cd">User</span> object is decorated (enhanced) by a <span class="cd">DecoratedUser</span> object.  It 
extends the User with several address-based properties. The original 
interface must stay the same, which explains why  <span class="cd">user.name</span> is assigned to  <span class="cd">this.name</span>. 
Also, the  <span class="cd">say</span> method of DecoratedUser hides the  <span class="cd">say</span> method of User. 
</p>
<p class="ptext">
JavaScript itself is far more effective in dynamically extending objects 
with additional data and behavior. You can learn more about extending objects  
in the Modern Patterns under Mixin pattern. The JavaScript optimized solution below also demonstrates a better solution in JavaScript. 
</p>
<p class="ptext">
The <span class="cd">log</span> function is a helper which collects and displays results. 
</p>
        <br />
<pre class="prettyprint">
var User = function(name) {
    this.name = name;
    this.say = function() {
        log.add("User: " + this.name);
    };
}

var DecoratedUser = function(user, street, city) {
    this.user = user;
    this.name = user.name;  // ensures interface stays the same
    this.street = street;
    this.city = city;
    this.say = function() {
        log.add("Decorated User: " + this.name + ", " +
                   this.street + ", " + this.city);
    };
}

// logging helper
var log = (function() {
    var log = "";
    return {
        add: function(msg) { log += msg + "\n"; },
        show: function() { alert(log); log = ""; }
    }
})();

function run() {

    var user = new User("Kelly");
    user.say();

    var decorated = new DecoratedUser(user, "Broadway", "New York");
    decorated.say();

    log.show();
}
</pre>
        <a class="btn" href="javascript:void(0);" onclick="run();return false;">Run</a>

<script type="text/javascript">
    var User = function (name) {
        this.name = name;
        this.say = function () {
            log.add("User: " + this.name);
        };
    }

    var DecoratedUser = function (user, street, city) {
        this.user = user;
        this.name = user.name;  // ensures interface stays the same
        this.street = street;
        this.city = city;
        this.say = function () {
            log.add("Decorated User: " + this.name + ", " +
                       this.street + ", " + this.city);
        };
    }

    function run() {

        var user = new User("Kelly");
        user.say();

        var decorated = new DecoratedUser(user, "Broadway", "New York");
        decorated.say();

        log.show();
    }
</script>



    </div>
</div>

<br />
<br />
<br />

<!-- JavaScript Optimated Code -->
<div class="row">
    <div class="span8">
        <h3>JavaScript Optimized Code</h3>
        <br />
<p class="ptext">
The Namespace pattern is applied to keep the code out of the global namespace. Our namespace is named <span class="cd">Patterns.Classic</span>.
A Revealing Module named <span class="cd">Decorator</span> returns two methods: 
<span class="cd">extend</span>  and <span class="cd">extendDeep</span>. They are described in the 
Modern Patterns section under the Mixin pattern (another 'decorator').
The <span class="cd">extend</span> method extends an object with additional properties and methods. <span class="cd">extendDeep</span>
also extends an object but does it recursively which includes nested objects and arrays.
</p>
<p class="ptext">
The <span class="cd">Patterns</span> object contains the <span class="cd">namespace</span> function which constructs namespaces non-destructively, 
that is, if a name already exists it won't overwrite it. 
</p>
<p class="ptext">
The <span class="cd">log</span> function is a helper which collects and displays results.
</p>
      
        <br />
<pre class="prettyprint">
var Patterns = {
    namespace: function (name) {
        var parts = name.split(".");
        var ns = this;

        for (var i = 0, len = parts.length; i < len; i++) {
            ns[parts[i]] = ns[parts[i]] || {};
            ns = ns[parts[i]];
        }

        return ns;
    }
};

Patterns.namespace("Classic").Decorator = (function () {
    
    var extend = function (dest, source) {
        for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
                dest[prop] = source[prop];
            }
        }
    };

    var extendDeep = function (dest, source) {
        for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
                if (typeof prop === "object") {
                    dest[prop] = $.isArray(prop) ? [] : {};
                    this.deepExtend(dest[prop], source[prop]);
                }
                else {
                    dest[prop] = source[prop];
                }
            }
        }
    };

    return { 
        extend: extend,
        extendDeep: extendDeep
    };

})();

// log helper
var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();


function run() {

    var decorator = Patterns.Classic.Decorator;

    var User = function (name) {
        this.name = name;
        this.say = function () {
            log.add("User: " + this.name);
        };
    }

    var user = new User("Kelly");
    user.say();

    decorator.extend(user, {
        street: "Broadway",
        city: "New York",
        say: function () {
            log.add("Extended User: " + this.name + ", " +
                    this.street + ", " + this.city);
        }
    });
    user.say();

    decorator.extendDeep(user, {
        school: "Columbia",
        grades: {
            "Spring": 4.0,
            "Fall": 3.5
        },
        say: function () {
            log.add("Deeply Extended User: " + this.name + ", " +
                    this.street + ", " + this.city + ", " +
                    this.school + ", grades: " +
                    this.grades.Spring + ", " + this.grades.Fall);
        }
    });
    user.say();

    log.show();
}
</pre>
        <a class="btn" href="javascript:void(0);" onclick="run1();return false;">Run</a>

<script type="text/javascript">
var Patterns = {
    namespace: function (name) {
        var parts = name.split(".");
        var ns = this;

        for (var i = 0, len = parts.length; i < len; i++) {
            ns[parts[i]] = ns[parts[i]] || {};
            ns = ns[parts[i]];
        }

        return ns;
    }
};

Patterns.namespace("Classic").Decorator = (function () {
    
    var extend = function (dest, source) {
        for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
                dest[prop] = source[prop];
            }
        }
    };

    var extendDeep = function (dest, source) {
        for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
                if (typeof prop === "object") {
                    dest[prop] = $.isArray(prop) ? [] : {};
                    this.deepExtend(dest[prop], source[prop]);
                }
                else {
                    dest[prop] = source[prop];
                }
            }
        }
    };

    return { 
        extend: extend,
        extendDeep: extendDeep
    };

})();

// log helper
var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();


function run1() {

    var decorator = Patterns.Classic.Decorator;

    var User = function (name) {
        this.name = name;
        this.say = function () {
            log.add("User: " + this.name);
        };
    }

    var user = new User("Kelly");
    user.say();

    decorator.extend(user, {
        street: "Broadway",
        city: "New York",
        say: function () {
            log.add("Extended User: " + this.name + ", " +
                    this.street + ", " + this.city);
        }
    });
    user.say();

    decorator.extendDeep(user, {
        school: "Columbia",
        grades: {
            "Spring": 4.0,
            "Fall": 3.5
        },
        say: function () {
            log.add("Deeply Extended User: " + this.name + ", " +
                    this.street + ", " + this.city + ", " +
                    this.school + ", grades: " +
                    this.grades.Spring + ", " + this.grades.Fall);
        }
    });
    user.say();

    log.show();
}

</script>



    </div>
</div>

<br />
<br />
<br />
<div class="row">
    <div class="span4 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='composite.htm'>Composite</a>

    </div>
    <div class="span3">
        <a href='facade.htm'>Façade</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />





      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
